{"version":3,"sources":["components/AddHouse.js","queries/index.js","components/Character.js","components/House.js","components/Houses.js","App.js","serviceWorker.js","index.js"],"names":["App","_this","this","react_default","a","createElement","type","onChange","e","setState","name","target","value","Component","getCharacter","gql","_templateObject","getHouseData","_templateObject2","getHouses","_templateObject3","Character","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","character","data","characterName","actorName","kills","map","kill","siblings","sibling","className","displayCharacterData","graphql","options","variables","id","characterId","House","state","selectedCharacter","_this2","house","characters","key","onClick","displayHouseData","components_Character","houseId","Houses","selectedHouse","houses","displayHouses","components_House","client","ApolloClient","uri","react_apollo_browser_umd","components_Houses","AddHouse","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dacead05.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <form>\n        <div>\n          <label></label>\n          <input type=\"text\" onChange={(e) => this.setState({ name: e.target.value })} />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","import { gql } from 'apollo-boost';\n\nconst getCharacter = gql`\n  query GetCharacter($id: ID)\n    {\n      character(id: $id){\n        id\n        characterName\n        actorName\n        kills\n        siblings\n      }\n  }\n`;\n\nconst getHouseData = gql`\n  query GetHouse($id: ID)\n    {\n      house(id: $id){\n        id\n        name\n        characters{\n          id,\n          characterName,\n          kills,\n          actorName\n        }\n      }\n  }\n`;\n\n\nconst getHouses = gql`{\n  houses {\n    id\n    name\n  }\n}`;\n\nexport { getCharacter, getHouses, getHouseData };\n\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getCharacter } from '../queries';\n\nclass Character extends Component {\n  constructor(props) {\n    super(props);\n  }\n  displayCharacterData() {\n    let { character } = this.props.data;\n    if (character) {\n      return (\n        <div>\n          <h3>{character.characterName}</h3>\n          <h3>{character.actorName}</h3>\n          <ul>\n            {character.kills.map((kill) => <li>{kill}</li>)}\n          </ul>\n          <ul>\n            {character.siblings.map((sibling) => <li>{sibling}</li>)}\n          </ul>\n        </div>\n      )\n    }\n  }\n  render() {\n    return (\n      <div className=\"character-data\">\n        {this.displayCharacterData()}\n      </div>\n    )\n  }\n}\n\nexport default graphql(getCharacter, {\n  options: (props) => {\n    return {\n      variables: {\n        id: props.characterId\n      }\n    }\n  }\n})(Character);","import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getHouseData } from '../queries';\nimport Character from './Character';\n\nclass House extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCharacter: null\n    }\n  }\n  displayHouseData() {\n    let { house } = this.props.data;\n    if (house) {\n      return (\n        <div>\n          <h2>Characters of House {house.name}</h2>\n          <ul>\n            {house.characters.map((character) =>\n              <li key={character.id} onClick={e => this.setState({ selectedCharacter: character.id })}>{character.characterName}</li>\n            )}\n          </ul>\n        </div>\n      )\n    }\n  }\n  render() {\n    return (\n      <div className=\"house-data\">\n        {this.displayHouseData()}\n        {this.state.selectedCharacter ? <Character characterId={this.state.selectedCharacter} /> : null}\n      </div>\n    )\n  }\n}\n\nexport default graphql(getHouseData, {\n  options: (props) => {\n    return {\n      variables: {\n        id: props.houseId\n      }\n    }\n  }\n})(House);","import React, { Component } from \"react\";\nimport { graphql } from 'react-apollo';\nimport { getHouses } from '../queries';\nimport House from './House';\nclass Houses extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedHouse: null\n    }\n  }\n  displayHouses() {\n    let { houses } = this.props.data;\n    if (houses) {\n      return (\n        <ul>\n          {houses.map((house) =>\n            <li key={house.id} onClick={e => this.setState({ selectedHouse: house.id })}>{house.name}</li>\n          )}\n        </ul>\n      )\n    }\n  }\n  render() {\n    return (\n      <div className=\"houses\">\n        <h2>Houses</h2>\n        {this.displayHouses()}\n        <House houseId={this.state.selectedHouse} />\n      </div>\n    )\n  }\n}\n\nexport default graphql(getHouses)(Houses);","import ApolloClient from 'apollo-boost';\nimport React, { Component } from \"react\";\nimport { ApolloProvider } from 'react-apollo';\nimport AddHouse from './components/AddHouse';\nimport Houses from './components/Houses';\nconst client = new ApolloClient({\n  uri: 'http://localhost:1024/graphql'\n})\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>Game of Thrones</h1>\n          <Houses />\n          <AddHouse />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}